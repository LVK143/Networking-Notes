1. OSI Model
The OSI Model (Open Systems Interconnection) is a conceptual framework used to understand how different networking protocols interact to enable communication between computers.

It has 7 layers:
| Layer Number | Layer Name   | Function                                | Example/Analogy                 |
| ------------ | ------------ | --------------------------------------- | ------------------------------- |
| 7            | Application  | Interface for user applications         | Web browsers, email clients     |
| 6            | Presentation | Data formatting and encryption          | SSL/TLS encryption              |
| 5            | Session      | Establishes and manages sessions        | Logging into a remote server    |
| 4            | Transport    | Reliable data transfer (TCP/UDP)        | TCP ensures data packets arrive |
| 3            | Network      | Routing and addressing (IP addresses)   | IP addresses, routers           |
| 2            | Data Link    | Physical addressing and error detection | MAC addresses, switches         |
| 1            | Physical     | Physical medium and transmission        | Ethernet cables, WiFi signals   |


Example: When you type a URL in your browser and hit Enter, the data you send and receive travels through all these layers â€” from Application (your browser) down to Physical (your network cable or WiFi) and back up on the receiving side.

2. TCP/IP Model

    The TCP/IP model is a simpler ,practical model user for interner communication .It has 4 layers
       | TCP/IP Layer   | Corresponding OSI Layers | Function                      |
  | -------------- | ------------------------ | ----------------------------- |
  | Application    | OSI 5, 6, 7              | Applications and protocols    |
  | Transport      | OSI 4                    | Data transport (TCP, UDP)     |
  | Internet       | OSI 3                    | IP addressing and routing     |
  | Network Access | OSI 1, 2                 | Physical and Data Link layers |

3. Ports & Protocols
  Ports are like channels that help a computer to distinguish between  diffrent types of network  traffic
  Ports range from 0 to 65535
  Common Ports
SSH:22
HTTP:80
HTTPS:443

DNS in Detail
  DNS is simple called Domain name system its acts as qucick translator of the IP address of TLD or a website it is simple tool to communincate on interner without remembering complex numbers 
  Much like every home has maling address for communication the same way internet has own unique IP address .while communicationg its complex task to rememner the IP address 164.23.555.22 simply instead say google.com

  Domain Hireachy

  Root Domain
  TLD 
  Second Level Domain

TLD (Top-Level Domain)

A TLD is the most righthand part of a domain name. So, for example, the tryhackme.com TLD is .com. There are two types of TLD, gTLD (Generic Top Level) and ccTLD (Country Code Top Level Domain). Historically a gTLD was meant to tell the user the domain name's purpose; for example, a .com would be for commercial purposes, .org for an organisation, .edu for education and .gov for government. And a ccTLD was used for geographical purposes, for example, .ca for sites based in Canada, .co.uk for sites based in the United Kingdom and so on. Due to such demand, there is an influx of new gTLDs ranging from .online , .club , .website , .biz and so many more
Second-Level Domain

Taking tryhackme.com as an example, the .com part is the TLD, and tryhackme is the Second Level Domain. When registering a domain name, the second-level domain is limited to 63 characters + the TLD and can only use a-z 0-9 and hyphens (cannot start or end with hyphens or have consecutive hyphens).

Subdomain

A subdomain sits on the left-hand side of the Second-Level Domain using a period to separate it; for example, in the name admin.tryhackme.com the admin part is the subdomain. A subdomain name has the same creation restrictions as a Second-Level Domain, being limited to 63 characters and can only use a-z 0-9 and hyphens (cannot start or end with hyphens or have consecutive hyphens). You can use multiple subdomains split with periods to create longer names, such as jupiter.servers.tryhackme.com. But the length must be kept to 253 characters or less. There is no limit to the number of subdomains you can create for your domain name.



What happens when DNS request is made

What happens when you make a DNS request
 
When you request a domain name, your computer first checks its local cache to see if you've previously looked up the address recently; if not, a request to your Recursive DNS Server will be made.

A Recursive DNS Server is usually provided by your ISP, but you can also choose your own. This server also has a local cache of recently looked up domain names. If a result is found locally, this is sent back to your computer, and your request ends here (this is common for popular and heavily requested services such as Google, Facebook, Twitter). If the request cannot be found locally, a journey begins to find the correct answer, starting with the internet's root DNS servers.

The root servers act as the DNS backbone of the internet; their job is to redirect you to the correct Top Level Domain Server, depending on your request. If, for example, you request www.tryhackme.com, the root server will recognise the Top Level Domain of .com and refer you to the correct TLD server that deals with .com addresses.

The TLD server holds records for where to find the authoritative server to answer the DNS request. The authoritative server is often also known as the nameserver for the domain. For example, the name server for tryhackme.com is kip.ns.cloudflare.com and uma.ns.cloudflare.com. You'll often find multiple nameservers for a domain name to act as a backup in case one goes down.

An authoritative DNS server is the server that is responsible for storing the DNS records for a particular domain name and where any updates to your domain name DNS records would be made. Depending on the record type, the DNS record is then sent back to the Recursive DNS Server, where a local copy will be cached for future requests and then relayed back to the original client that made the request. DNS records all come with a TTL (Time To Live) value. This value is a number represented in seconds that the response should be saved for locally until you have to look it up again. Caching saves on having to make a DNS request every time you communicate with a server.

